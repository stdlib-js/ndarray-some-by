"use strict";var p=function(r,e){return function(){return e||r((e={exports:{}}).exports,e),e.exports}};var V=p(function(Rr,z){z.exports={dims:null,keepdims:!1}});var D=p(function(Ur,A){"use strict";var C=require("@stdlib/assert-is-plain-object"),j=require("@stdlib/assert-has-own-property"),N=require("@stdlib/assert-is-boolean").isPrimitive,Y=require("@stdlib/assert-is-integer-array").primitives,G=require("@stdlib/assert-is-empty-collection"),H=require("@stdlib/ndarray-base-to-unique-normalized-indices"),F=require("@stdlib/array-base-join"),h=require("@stdlib/string-format");function J(r,e,i){var a;if(!C(i))return new TypeError(h("invalid argument. Options argument must be an object. Value: `%s`.",i));if(j(i,"keepdims")&&(r.keepdims=i.keepdims,!N(r.keepdims)))return new TypeError(h("invalid option. `%s` option must be a boolean. Option: `%s`.","keepdims",r.keepdims));if(j(i,"dims")){if(r.dims=i.dims,!Y(r.dims)&&!G(r.dims))return new TypeError(h("invalid option. `%s` option must be an array of integers. Option: `%s`.","dims",r.dims));if(a=H(r.dims,e-1),a===null)return new RangeError(h("invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].","dims",F(r.dims,",")));if(a.length!==r.dims.length)return new Error(h("invalid option. `%s` option contains duplicate indices. Option: [%s].","dims",F(r.dims,",")));if(a.length>e)return new RangeError(h("invalid option. `%s` option specifies more dimensions than exists in the input array. Number of dimensions: %d. Option: [%s].",e,F(r.dims,",")));r.dims=a}return null}A.exports=J});var P=p(function(_r,L){"use strict";var E=require("@stdlib/assert-is-function"),K=require("@stdlib/assert-is-integer").isPrimitive,B=require("@stdlib/assert-is-ndarray-like"),M=require("@stdlib/ndarray-base-assert-is-integer-data-type"),Q=require("@stdlib/ndarray-base-unary-reduce-subarray-by"),W=require("@stdlib/ndarray-base-some-by"),X=require("@stdlib/ndarray-base-spread-dimensions"),Z=require("@stdlib/array-base-indices-complement"),$=require("@stdlib/ndarray-dtype"),rr=require("@stdlib/ndarray-shape"),I=require("@stdlib/ndarray-base-order"),er=require("@stdlib/ndarray-base-data-buffer"),ir=require("@stdlib/ndarray-base-strides"),ar=require("@stdlib/ndarray-base-offset"),nr=require("@stdlib/ndarray-defaults"),tr=require("@stdlib/ndarray-empty"),ur=require("@stdlib/ndarray-base-ctor"),sr=require("@stdlib/ndarray-base-maybe-broadcast-array"),vr=require("@stdlib/ndarray-base-broadcast-scalar"),or=require("@stdlib/strided-base-reinterpret-boolean"),mr=require("@stdlib/array-base-take-indexed"),dr=require("@stdlib/array-base-zero-to"),lr=require("@stdlib/object-assign"),b=require("@stdlib/string-format"),gr=V(),fr=D(),qr=nr.get("dtypes.integer_index");function cr(r,e,i,a,o){var w,t,s,m,c,d,l,n,g,f,u,y,k,v,S;if(w=arguments.length,!B(r))throw new TypeError(b("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",r));if(w<4){if(!E(i))throw new TypeError(b("invalid argument. Third argument must be a function. Value: `%s`.",i));u=i}else if(w>4){if(f=!0,S=i,u=a,!E(u))throw new TypeError(b("invalid argument. Fourth argument must be a function. Value: `%s`.",u));m=o}else if(E(i))u=i,m=a;else if(E(a))f=!0,S=i,u=a;else throw new TypeError(b("invalid argument. Fourth argument must be a function. Value: `%s`.",a));if(l=rr(r),y=l.length,t=lr({},gr),f&&(c=fr(t,y,S),c))throw c;if(t.dims===null&&(t.dims=dr(y)),d=Z(y,t.dims),n=mr(l,d),g=I(r),B(e)){if(!M($(e)))throw new TypeError(b("invalid argument. Second argument must have an integer data type. Value: `%s`.",e));try{k=sr(e,n)}catch(Pr){throw new Error("invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.")}}else{if(!K(e))throw new TypeError(b("invalid argument. Second argument must be an integer or an ndarray-like object. Value: `%s`.",e));k=vr(e,qr,n,g)}return v=tr(n,{dtype:"bool",order:g}),s=new ur("uint8",or(er(v),0),n,ir(v,!1),ar(v),I(v)),Q(W,[r,s,k],t.dims,u,m),t.keepdims&&(v=X(y,v,d)),v}L.exports=cr});var U=p(function(zr,R){"use strict";var T=require("@stdlib/assert-is-function"),yr=require("@stdlib/assert-is-integer").isPrimitive,hr=require("@stdlib/ndarray-base-assert-is-integer-data-type"),O=require("@stdlib/assert-is-ndarray-like"),br=require("@stdlib/ndarray-base-unary-reduce-subarray-by"),wr=require("@stdlib/ndarray-ndims"),pr=require("@stdlib/ndarray-base-some-by"),Er=require("@stdlib/ndarray-dtype"),x=require("@stdlib/ndarray-shape"),Tr=require("@stdlib/ndarray-base-order"),kr=require("@stdlib/ndarray-defaults"),Sr=require("@stdlib/ndarray-base-maybe-broadcast-array"),Vr=require("@stdlib/ndarray-base-broadcast-scalar"),Fr=require("@stdlib/object-assign"),Dr=require("@stdlib/array-base-zero-to"),q=require("@stdlib/string-format"),Or=V(),jr=D(),Ar=kr.get("dtypes.integer_index");function Br(r,e,i,a,o,w){var t,s,m,c,d,l,n,g,f,u;if(t=arguments.length,!O(r))throw new TypeError(q("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",r));if(!O(i))throw new TypeError(q("invalid argument. Third argument must be an ndarray-like object. Value: `%s`.",i));if(t<5){if(n=a,!T(n))throw new TypeError(q("invalid argument. Fourth argument must be a function. Value: `%s`.",n))}else if(t>5){if(d=!0,u=a,n=o,!T(n))throw new TypeError(q("invalid argument. Fifth argument must be a function. Value: `%s`.",n));l=w}else if(T(a))n=a,l=o;else if(T(o))d=!0,u=a,n=o;else throw new TypeError(q("invalid argument. Fifth argument must be a function. Value: `%s`.",o));if(g=wr(r),s=Fr({},Or),d&&(m=jr(s,g,u),m))throw m;if(s.dims===null&&(s.dims=Dr(g)),c=Tr(r),O(e)){if(!hr(Er(e)))throw new TypeError(q("invalid argument. Second argument must have an integer data type. Value: `%s`.",e));try{f=Sr(e,x(i))}catch(y){throw new Error("invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.")}}else{if(!yr(e))throw new TypeError(q("invalid argument. Second argument must be an integer or an ndarray-like object. Value: `%s`.",e));f=Vr(e,Ar,x(i),c)}return br(pr,[r,i,f],s.dims,n,l),i}R.exports=Br});var Ir=require("@stdlib/utils-define-nonenumerable-read-only-property"),_=P(),Lr=U();Ir(_,"assign",Lr);module.exports=_;
/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map

{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"dims\": null,\n  \"keepdims\": false\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isIntegerArray = require( '@stdlib/assert-is-integer-array' ).primitives;\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length > ndims ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option specifies more dimensions than exists in the input array. Number of dimensions: %d. Option: [%s].', 'dims', ndims, join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isIntegerDataType = require( '@stdlib/ndarray-base-assert-is-integer-data-type' );\nvar unaryReduceSubarrayBy = require( '@stdlib/ndarray-base-unary-reduce-subarray-by' );\nvar base = require( '@stdlib/ndarray-base-some-by' );\nvar spreadDimensions = require( '@stdlib/ndarray-base-spread-dimensions' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar getDtype = require( '@stdlib/ndarray-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to the input array originating in userland\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar getData = require( '@stdlib/ndarray-base-data-buffer' );\nvar getStrides = require( '@stdlib/ndarray-base-strides' );\nvar getOffset = require( '@stdlib/ndarray-base-offset' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar ndarrayCtor = require( '@stdlib/ndarray-base-ctor' );\nvar maybeBroadcastArray = require( '@stdlib/ndarray-base-maybe-broadcast-array' );\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar objectAssign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.integer_index' );\n\n\n// MAIN //\n\n/**\n* Tests whether at least `n` elements along one or more ndarray dimensions pass a test implemented by a predicate function.\n*\n* @param {ndarray} x - input ndarray\n* @param {(ndarray|integer)} n - number of elements which must pass a test\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - predicate function execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be an ndarray-like object or a scalar value\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var isEven = require( '@stdlib/assert-is-even' ).isPrimitive;\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform reduction:\n* var out = someBy( x, 3, isEven );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*/\nfunction someBy( x, n, options, predicate, thisArg ) {\n\tvar nargs;\n\tvar opts;\n\tvar view;\n\tvar ctx;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar ord;\n\tvar flg;\n\tvar cb;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar o;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\t// Case: someBy( x, n, predicate )\n\tif ( nargs < 4 ) {\n\t\tif ( !isFunction( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a function. Value: `%s`.', options ) );\n\t\t}\n\t\tcb = options;\n\t}\n\t// Case: someBy( x, n, options, predicate, thisArg )\n\telse if ( nargs > 4 ) {\n\t\tflg = true;\n\t\to = options;\n\t\tcb = predicate;\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a function. Value: `%s`.', cb ) );\n\t\t}\n\t\tctx = thisArg;\n\t}\n\t// Case: someBy( x, n, predicate, thisArg )\n\telse if ( isFunction( options ) ) {\n\t\tcb = options;\n\t\tctx = predicate;\n\t}\n\t// Case: someBy( x, n, options, predicate )\n\telse if ( isFunction( predicate ) ) {\n\t\tflg = true;\n\t\to = options;\n\t\tcb = predicate;\n\t}\n\t// Case: someBy( x, n, ???, ??? )\n\telse {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, DEFAULTS );\n\tif ( flg ) {\n\t\terr = validate( opts, N, o );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshy = takeIndexed( shx, idx );\n\n\t// Resolve input array meta data:\n\tord = getOrder( x );\n\n\tif ( isndarrayLike( n ) ) {\n\t\tif ( !isIntegerDataType( getDtype( n ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must have an integer data type. Value: `%s`.', n ) );\n\t\t}\n\t\ttry {\n\t\t\tv = maybeBroadcastArray( n, shy );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\tthrow new Error( 'invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.' );\n\t\t}\n\t} else {\n\t\tif ( !isInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer or an ndarray-like object. Value: `%s`.', n ) );\n\t\t}\n\t\tv = broadcastScalar( n, DEFAULT_DTYPE, shy, ord );\n\t}\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions and which has the same memory layout as the input array:\n\ty = empty( shy, {\n\t\t'dtype': 'bool',\n\t\t'order': ord\n\t});\n\n\t// Reinterpret the output array as an \"indexed\" array to ensure faster element access:\n\tview = new ndarrayCtor( 'uint8', reinterpretBoolean( getData( y ), 0 ), shy, getStrides( y, false ), getOffset( y ), getOrder( y ) );\n\n\t// Perform the reduction:\n\tunaryReduceSubarrayBy( base, [ x, view, v ], opts.dims, cb, ctx );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\ty = spreadDimensions( N, y, idx );\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = someBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isIntegerDataType = require( '@stdlib/ndarray-base-assert-is-integer-data-type' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar unaryReduceSubarrayBy = require( '@stdlib/ndarray-base-unary-reduce-subarray-by' );\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar base = require( '@stdlib/ndarray-base-some-by' );\nvar getDtype = require( '@stdlib/ndarray-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to the input arrays originating in userland\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\nvar maybeBroadcastArray = require( '@stdlib/ndarray-base-maybe-broadcast-array' );\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar objectAssign = require( '@stdlib/object-assign' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar format = require( '@stdlib/string-format' );\nvar DEFAULTS = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.integer_index' );\n\n\n// MAIN //\n\n/**\n* Tests whether at least `n` elements along one or more ndarray dimensions pass a test implemented by a predicate function.\n*\n* @param {ndarray} x - input ndarray\n* @param {(ndarray|integer)} n - number of elements which must pass the test\n* @param {ndarray} y - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - predicate execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {Error} second argument must be broadcast-compatible with the non-reduced dimensions of the input ndarray\n* @throws {TypeError} third argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var isEven = require( '@stdlib/assert-is-even' ).isPrimitive;\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = empty( [], {\n*     'dtype': 'bool'\n* });\n*\n* // Perform reduction:\n* var out = assign( x, 3, y, isEven );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*/\nfunction assign( x, n, y, options, predicate, thisArg ) {\n\tvar nargs;\n\tvar opts;\n\tvar err;\n\tvar ord;\n\tvar flg;\n\tvar ctx;\n\tvar cb;\n\tvar N;\n\tvar v;\n\tvar o;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an ndarray-like object. Value: `%s`.', y ) );\n\t}\n\t// Case: assign( x, n, y, predicate )\n\tif ( nargs < 5 ) {\n\t\tcb = options;\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a function. Value: `%s`.', cb ) );\n\t\t}\n\t}\n\t// Case: assign( x, n, y, options, predicate, thisArg )\n\telse if ( nargs > 5 ) {\n\t\tflg = true;\n\t\to = options;\n\t\tcb = predicate;\n\t\tif ( !isFunction( cb ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Fifth argument must be a function. Value: `%s`.', cb ) );\n\t\t}\n\t\tctx = thisArg;\n\t}\n\t// Case: assign( x, n, y, predicate, thisArg )\n\telse if ( isFunction( options ) ) {\n\t\tcb = options;\n\t\tctx = predicate;\n\t}\n\t// Case: assign( x, n, y, options, predicate )\n\telse if ( isFunction( predicate ) ) {\n\t\tflg = true;\n\t\to = options;\n\t\tcb = predicate;\n\t}\n\t// Case: assign( x, n, y, ???, ??? )\n\telse {\n\t\tthrow new TypeError( format( 'invalid argument. Fifth argument must be a function. Value: `%s`.', predicate ) );\n\t}\n\tN = ndims( x );\n\topts = objectAssign( {}, DEFAULTS );\n\tif ( flg ) {\n\t\terr = validate( opts, N, o );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve input array meta data:\n\tord = getOrder( x );\n\n\tif ( isndarrayLike( n ) ) {\n\t\tif ( !isIntegerDataType( getDtype( n ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must have an integer data type. Value: `%s`.', n ) );\n\t\t}\n\t\ttry {\n\t\t\tv = maybeBroadcastArray( n, getShape( y ) );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\tthrow new Error( 'invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.' );\n\t\t}\n\t} else {\n\t\tif ( !isInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer or an ndarray-like object. Value: `%s`.', n ) );\n\t\t}\n\t\tv = broadcastScalar( n, DEFAULT_DTYPE, getShape( y ), ord );\n\t}\n\t// Perform the reduction:\n\tunaryReduceSubarrayBy( base, [ x, y, v ], opts.dims, cb, ctx ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether at least `n` elements along one or more ndarray dimensions pass a test implemented by a predicate function.\n*\n* @module @stdlib/ndarray-some-by\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var someBy = require( '@stdlib/ndarray-some-by' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform reduction:\n* var out = someBy( x, 6 );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var empty = require( '@stdlib/ndarray-empty' );\n* var someBy = require( '@stdlib/ndarray-some-by' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = empty( [], {\n*     'dtype': 'bool'\n* });\n*\n* // Perform reduction:\n* var out = someBy.assign( x, 6.0, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isIntegerArray", "isEmptyCollection", "normalizeIndices", "join", "format", "validate", "opts", "ndims", "options", "tmp", "require_main", "__commonJSMin", "exports", "module", "isFunction", "isInteger", "isndarrayLike", "isIntegerDataType", "unaryReduceSubarrayBy", "base", "spreadDimensions", "indicesComplement", "getDtype", "getShape", "getOrder", "getData", "getStrides", "getOffset", "defaults", "empty", "ndarrayCtor", "maybeBroadcastArray", "broadcastScalar", "reinterpretBoolean", "takeIndexed", "zeroTo", "objectAssign", "format", "DEFAULTS", "validate", "DEFAULT_DTYPE", "someBy", "x", "n", "options", "predicate", "thisArg", "nargs", "opts", "view", "ctx", "err", "idx", "shx", "shy", "ord", "flg", "cb", "N", "v", "y", "o", "require_assign", "__commonJSMin", "exports", "module", "isFunction", "isInteger", "isIntegerDataType", "isndarrayLike", "unaryReduceSubarrayBy", "ndims", "base", "getDtype", "getShape", "getOrder", "defaults", "maybeBroadcastArray", "broadcastScalar", "objectAssign", "zeroTo", "format", "DEFAULTS", "validate", "DEFAULT_DTYPE", "assign", "x", "n", "y", "options", "predicate", "thisArg", "nargs", "opts", "err", "ord", "flg", "ctx", "cb", "N", "v", "o", "setReadOnly", "main", "assign"]
}
